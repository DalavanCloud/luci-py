// Copyright 2014 The Swarming Authors. All rights reserved.
// Use of this source code is governed by the Apache v2.0 license that can be
// found in the LICENSE file.

// Messages for Primary <-> Replica auth DB replication protocol.
// Used from both Primary side (i.e. auth_service) and Replica side (any service
// that uses auth component).

package components.auth.proto.replication;


////////////////////////////////////////////////////////////////////////////////
// Linking protocol, used to associate Replicas with Primary.
//
// Overall protocol flow:
// 1. Primary generates and serializes ServiceLinkTicket message (via
//    /auth_service/api/v1/services/<app id>/linking_url call).
// 2. ServiceLinkTicket is passed to Replica as GET parameter in /auth/link
//    endpoint accessible only to GAE-level administrators of Replica instance.
// 3. Replica sends ServiceLinkRequest to Primary via direct service <-> service
//    URLFetch HTTP POST to /auth_service/api/v1/internal/link_replica.
// 4. Primary registers the replica, and replies with ServiceLinkResponse.
// 5. Replica registers the primary.
//
// Implementations:
//  * Replica side: components/auth/ui/ui.py
//  * Primary side: services/auth_service/frontend/handlers.py


// Generated by Primary, passed to Replica to initiate linking process.
message ServiceLinkTicket {
  // GAE application ID of Primary that generated this ticket. Replica will send
  // ServiceLinkRequest to this service when it processes the ticket.
  required string primary_id = 1;
  // URL to the root page of a primary service, i.e. https://<...>.appspot.com.
  // Useful when testing on dev appserver and on non-default version.
  required string primary_url = 2;
  // Identity of a user that generated this ticket.
  required string generated_by = 3;
  // Opaque blob passed back to Primary in ServiceLinkRequest. Its exact
  // structure is an implementation detail of Primary. It contains app_id of
  // a replica this ticket is intended for, timestamp and HMAC tag.
  required bytes ticket = 4;
}


// Sent from Replica to Primary via direct serivce <-> service HTTP call,
// replicas app_id would be available via X-Appengine-Inbound-Appid header.
message ServiceLinkRequest {
  // Same ticket that was passed to Replica via ServiceLinkTicket.
  required bytes ticket = 1;
  // URL to use when making requests to Replica from Primary.
  required string replica_url = 2;
  // Identity of a user that accepted the ticket and initiated this request.
  required string initiated_by = 3;
}


// Primary's response to ServiceLinkRequest. Always returned with HTTP code 200.
message ServiceLinkResponse {
  // Status codes.
  enum Status {
    // The service is now linked and primary will be pushing updates to it.
    SUCCESS = 0;
    // Primary do not replies.
    TRANSPORT_ERROR = 1;
    // Linking ticket is invalid or expired.
    BAD_TICKET = 2;
    // Linking ticket was generated for another app, not the calling one.
    AUTH_ERROR = 3;
  }
  required Status status = 1;
}


////////////////////////////////////////////////////////////////////////////////
// Main replication protocol. Used to push AuthDB from Primary to Replicas.


// Some user group. Corresponds to AuthGroup entity in model.py.
message AuthGroup {
  // Name of the group.
  required string name = 1;

  // List of members that are explicitly in this group.
  repeated string members = 2;
  // List of identity-glob expressions (like 'user:*@example.com').
  repeated string globs = 3;
  // List of nested group names.
  repeated string nested = 4;

  // Human readable description.
  required string description = 5;

  // When the group was created. Microseconds since epoch.
  required int64 created_ts = 6;
  // Who created the group.
  required string created_by = 7;

  // When the group was modified last time. Microseconds since epoch.
  required int64 modified_ts = 8;
  // Who modified the group last time.
  required string modified_by = 9;
}


// Some secret blob. Corresponds to AuthSecret entity in model.py.
message AuthSecret {
  // Name of the secret.
  required string name = 1;
  // Last several values of a secret, with current value in front.
  repeated bytes values = 2;
  // When secret was modified last time. Microseconds since epoch.
  required int64 modified_ts = 3;
  // Who modified the secret last time.
  required string modified_by = 4;
}


// An entire database of auth configuration that is being replicated.
// Corresponds to AuthGlobalConfig entity in model.py, plus a list of all groups
// and a list of global secrets.
message AuthDB {
  // OAuth2 client_id to use to mint new OAuth2 tokens.
  required string oauth_client_id = 1;
  // OAuth2 client secret. Not so secret really, since it's passed to clients.
  required string oauth_client_secret = 2;
  // Additional OAuth2 client_ids allowed to access the services.
  repeated string oauth_additional_client_ids = 3;
  // All groups.
  repeated AuthGroup groups = 4;
  // Global secrets shared between services.
  repeated AuthSecret secrets = 5;
}
