# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: isolate_bot.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='isolate_bot.proto',
  package='luci.swarming.bot',
  syntax='proto3',
  serialized_pb=_b('\n\x11isolate_bot.proto\x12\x11luci.swarming.bot\"C\n\x0f\x43ontainsRequest\x12\x30\n\x06\x64igest\x18\x01 \x03(\x0b\x32 .luci.swarming.bot.ContentDigest\">\n\rContainsReply\x12-\n\x06status\x18\x01 \x01(\x0b\x32\x1d.luci.swarming.bot.BlobStatus\"=\n\x0fPutBlobsRequest\x12*\n\x04\x64\x61ta\x18\x01 \x01(\x0b\x32\x1c.luci.swarming.bot.BlobChunk\">\n\rPutBlobsReply\x12-\n\x06status\x18\x01 \x01(\x0b\x32\x1d.luci.swarming.bot.BlobStatus\"C\n\x0fGetBlobsRequest\x12\x30\n\x06\x64igest\x18\x01 \x03(\x0b\x32 .luci.swarming.bot.ContentDigest\"j\n\rGetBlobsReply\x12-\n\x06status\x18\x01 \x01(\x0b\x32\x1d.luci.swarming.bot.BlobStatus\x12*\n\x04\x64\x61ta\x18\x02 \x01(\x0b\x32\x1c.luci.swarming.bot.BlobChunk\"[\n\tBlobChunk\x12\x30\n\x06\x64igest\x18\x01 \x01(\x0b\x32 .luci.swarming.bot.ContentDigest\x12\x0e\n\x06offset\x18\x02 \x01(\x03\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\"D\n\rContentDigest\x12\x0e\n\x06\x64igest\x18\x01 \x01(\x0c\x12\x12\n\nsize_bytes\x18\x02 \x01(\x03\x12\x0f\n\x07version\x18\x03 \x01(\x05\"\x96\x02\n\nBlobStatus\x12\x11\n\tsucceeded\x18\x01 \x01(\x08\x12\x36\n\x05\x65rror\x18\x02 \x01(\x0e\x32\'.luci.swarming.bot.BlobStatus.ErrorCode\x12\x14\n\x0c\x65rror_detail\x18\x03 \x01(\t\x12\x38\n\x0emissing_digest\x18\x04 \x03(\x0b\x32 .luci.swarming.bot.ContentDigest\"m\n\tErrorCode\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x14\n\x10INVALID_ARGUMENT\x10\x01\x12\x12\n\x0eMISSING_DIGEST\x10\x02\x12\x13\n\x0f\x44IGEST_MISMATCH\x10\x03\x12\x14\n\x10NODE_PARSE_ERROR\x10\x04\x32\x8a\x02\n\x0e\x42otFileService\x12P\n\x08\x43ontains\x12\".luci.swarming.bot.ContainsRequest\x1a .luci.swarming.bot.ContainsReply\x12R\n\x08PutBlobs\x12\".luci.swarming.bot.PutBlobsRequest\x1a .luci.swarming.bot.PutBlobsReply(\x01\x12R\n\x08GetBlobs\x12\".luci.swarming.bot.GetBlobsRequest\x1a .luci.swarming.bot.GetBlobsReply0\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_BLOBSTATUS_ERRORCODE = _descriptor.EnumDescriptor(
  name='ErrorCode',
  full_name='luci.swarming.bot.BlobStatus.ErrorCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INVALID_ARGUMENT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MISSING_DIGEST', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DIGEST_MISMATCH', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NODE_PARSE_ERROR', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=810,
  serialized_end=919,
)
_sym_db.RegisterEnumDescriptor(_BLOBSTATUS_ERRORCODE)


_CONTAINSREQUEST = _descriptor.Descriptor(
  name='ContainsRequest',
  full_name='luci.swarming.bot.ContainsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='digest', full_name='luci.swarming.bot.ContainsRequest.digest', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=40,
  serialized_end=107,
)


_CONTAINSREPLY = _descriptor.Descriptor(
  name='ContainsReply',
  full_name='luci.swarming.bot.ContainsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='luci.swarming.bot.ContainsReply.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=109,
  serialized_end=171,
)


_PUTBLOBSREQUEST = _descriptor.Descriptor(
  name='PutBlobsRequest',
  full_name='luci.swarming.bot.PutBlobsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='luci.swarming.bot.PutBlobsRequest.data', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=173,
  serialized_end=234,
)


_PUTBLOBSREPLY = _descriptor.Descriptor(
  name='PutBlobsReply',
  full_name='luci.swarming.bot.PutBlobsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='luci.swarming.bot.PutBlobsReply.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=236,
  serialized_end=298,
)


_GETBLOBSREQUEST = _descriptor.Descriptor(
  name='GetBlobsRequest',
  full_name='luci.swarming.bot.GetBlobsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='digest', full_name='luci.swarming.bot.GetBlobsRequest.digest', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=300,
  serialized_end=367,
)


_GETBLOBSREPLY = _descriptor.Descriptor(
  name='GetBlobsReply',
  full_name='luci.swarming.bot.GetBlobsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='luci.swarming.bot.GetBlobsReply.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='luci.swarming.bot.GetBlobsReply.data', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=369,
  serialized_end=475,
)


_BLOBCHUNK = _descriptor.Descriptor(
  name='BlobChunk',
  full_name='luci.swarming.bot.BlobChunk',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='digest', full_name='luci.swarming.bot.BlobChunk.digest', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='luci.swarming.bot.BlobChunk.offset', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='luci.swarming.bot.BlobChunk.data', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=477,
  serialized_end=568,
)


_CONTENTDIGEST = _descriptor.Descriptor(
  name='ContentDigest',
  full_name='luci.swarming.bot.ContentDigest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='digest', full_name='luci.swarming.bot.ContentDigest.digest', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='size_bytes', full_name='luci.swarming.bot.ContentDigest.size_bytes', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version', full_name='luci.swarming.bot.ContentDigest.version', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=570,
  serialized_end=638,
)


_BLOBSTATUS = _descriptor.Descriptor(
  name='BlobStatus',
  full_name='luci.swarming.bot.BlobStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='succeeded', full_name='luci.swarming.bot.BlobStatus.succeeded', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error', full_name='luci.swarming.bot.BlobStatus.error', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_detail', full_name='luci.swarming.bot.BlobStatus.error_detail', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='missing_digest', full_name='luci.swarming.bot.BlobStatus.missing_digest', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BLOBSTATUS_ERRORCODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=641,
  serialized_end=919,
)

_CONTAINSREQUEST.fields_by_name['digest'].message_type = _CONTENTDIGEST
_CONTAINSREPLY.fields_by_name['status'].message_type = _BLOBSTATUS
_PUTBLOBSREQUEST.fields_by_name['data'].message_type = _BLOBCHUNK
_PUTBLOBSREPLY.fields_by_name['status'].message_type = _BLOBSTATUS
_GETBLOBSREQUEST.fields_by_name['digest'].message_type = _CONTENTDIGEST
_GETBLOBSREPLY.fields_by_name['status'].message_type = _BLOBSTATUS
_GETBLOBSREPLY.fields_by_name['data'].message_type = _BLOBCHUNK
_BLOBCHUNK.fields_by_name['digest'].message_type = _CONTENTDIGEST
_BLOBSTATUS.fields_by_name['error'].enum_type = _BLOBSTATUS_ERRORCODE
_BLOBSTATUS.fields_by_name['missing_digest'].message_type = _CONTENTDIGEST
_BLOBSTATUS_ERRORCODE.containing_type = _BLOBSTATUS
DESCRIPTOR.message_types_by_name['ContainsRequest'] = _CONTAINSREQUEST
DESCRIPTOR.message_types_by_name['ContainsReply'] = _CONTAINSREPLY
DESCRIPTOR.message_types_by_name['PutBlobsRequest'] = _PUTBLOBSREQUEST
DESCRIPTOR.message_types_by_name['PutBlobsReply'] = _PUTBLOBSREPLY
DESCRIPTOR.message_types_by_name['GetBlobsRequest'] = _GETBLOBSREQUEST
DESCRIPTOR.message_types_by_name['GetBlobsReply'] = _GETBLOBSREPLY
DESCRIPTOR.message_types_by_name['BlobChunk'] = _BLOBCHUNK
DESCRIPTOR.message_types_by_name['ContentDigest'] = _CONTENTDIGEST
DESCRIPTOR.message_types_by_name['BlobStatus'] = _BLOBSTATUS

ContainsRequest = _reflection.GeneratedProtocolMessageType('ContainsRequest', (_message.Message,), dict(
  DESCRIPTOR = _CONTAINSREQUEST,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.ContainsRequest)
  ))
_sym_db.RegisterMessage(ContainsRequest)

ContainsReply = _reflection.GeneratedProtocolMessageType('ContainsReply', (_message.Message,), dict(
  DESCRIPTOR = _CONTAINSREPLY,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.ContainsReply)
  ))
_sym_db.RegisterMessage(ContainsReply)

PutBlobsRequest = _reflection.GeneratedProtocolMessageType('PutBlobsRequest', (_message.Message,), dict(
  DESCRIPTOR = _PUTBLOBSREQUEST,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.PutBlobsRequest)
  ))
_sym_db.RegisterMessage(PutBlobsRequest)

PutBlobsReply = _reflection.GeneratedProtocolMessageType('PutBlobsReply', (_message.Message,), dict(
  DESCRIPTOR = _PUTBLOBSREPLY,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.PutBlobsReply)
  ))
_sym_db.RegisterMessage(PutBlobsReply)

GetBlobsRequest = _reflection.GeneratedProtocolMessageType('GetBlobsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETBLOBSREQUEST,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.GetBlobsRequest)
  ))
_sym_db.RegisterMessage(GetBlobsRequest)

GetBlobsReply = _reflection.GeneratedProtocolMessageType('GetBlobsReply', (_message.Message,), dict(
  DESCRIPTOR = _GETBLOBSREPLY,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.GetBlobsReply)
  ))
_sym_db.RegisterMessage(GetBlobsReply)

BlobChunk = _reflection.GeneratedProtocolMessageType('BlobChunk', (_message.Message,), dict(
  DESCRIPTOR = _BLOBCHUNK,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.BlobChunk)
  ))
_sym_db.RegisterMessage(BlobChunk)

ContentDigest = _reflection.GeneratedProtocolMessageType('ContentDigest', (_message.Message,), dict(
  DESCRIPTOR = _CONTENTDIGEST,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.ContentDigest)
  ))
_sym_db.RegisterMessage(ContentDigest)

BlobStatus = _reflection.GeneratedProtocolMessageType('BlobStatus', (_message.Message,), dict(
  DESCRIPTOR = _BLOBSTATUS,
  __module__ = 'isolate_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.bot.BlobStatus)
  ))
_sym_db.RegisterMessage(BlobStatus)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class BotFileServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Contains = channel.unary_unary(
        '/luci.swarming.bot.BotFileService/Contains',
        request_serializer=ContainsRequest.SerializeToString,
        response_deserializer=ContainsReply.FromString,
        )
    self.PutBlobs = channel.stream_unary(
        '/luci.swarming.bot.BotFileService/PutBlobs',
        request_serializer=PutBlobsRequest.SerializeToString,
        response_deserializer=PutBlobsReply.FromString,
        )
    self.GetBlobs = channel.unary_stream(
        '/luci.swarming.bot.BotFileService/GetBlobs',
        request_serializer=GetBlobsRequest.SerializeToString,
        response_deserializer=GetBlobsReply.FromString,
        )


class BotFileServiceServicer(object):

  def Contains(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PutBlobs(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBlobs(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BotFileServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Contains': grpc.unary_unary_rpc_method_handler(
          servicer.Contains,
          request_deserializer=ContainsRequest.FromString,
          response_serializer=ContainsReply.SerializeToString,
      ),
      'PutBlobs': grpc.stream_unary_rpc_method_handler(
          servicer.PutBlobs,
          request_deserializer=PutBlobsRequest.FromString,
          response_serializer=PutBlobsReply.SerializeToString,
      ),
      'GetBlobs': grpc.unary_stream_rpc_method_handler(
          servicer.GetBlobs,
          request_deserializer=GetBlobsRequest.FromString,
          response_serializer=GetBlobsReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'luci.swarming.bot.BotFileService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaBotFileServiceServicer(object):
  def Contains(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def PutBlobs(self, request_iterator, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetBlobs(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaBotFileServiceStub(object):
  def Contains(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Contains.future = None
  def PutBlobs(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  PutBlobs.future = None
  def GetBlobs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()


def beta_create_BotFileService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('luci.swarming.bot.BotFileService', 'Contains'): ContainsRequest.FromString,
    ('luci.swarming.bot.BotFileService', 'GetBlobs'): GetBlobsRequest.FromString,
    ('luci.swarming.bot.BotFileService', 'PutBlobs'): PutBlobsRequest.FromString,
  }
  response_serializers = {
    ('luci.swarming.bot.BotFileService', 'Contains'): ContainsReply.SerializeToString,
    ('luci.swarming.bot.BotFileService', 'GetBlobs'): GetBlobsReply.SerializeToString,
    ('luci.swarming.bot.BotFileService', 'PutBlobs'): PutBlobsReply.SerializeToString,
  }
  method_implementations = {
    ('luci.swarming.bot.BotFileService', 'Contains'): face_utilities.unary_unary_inline(servicer.Contains),
    ('luci.swarming.bot.BotFileService', 'GetBlobs'): face_utilities.unary_stream_inline(servicer.GetBlobs),
    ('luci.swarming.bot.BotFileService', 'PutBlobs'): face_utilities.stream_unary_inline(servicer.PutBlobs),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_BotFileService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('luci.swarming.bot.BotFileService', 'Contains'): ContainsRequest.SerializeToString,
    ('luci.swarming.bot.BotFileService', 'GetBlobs'): GetBlobsRequest.SerializeToString,
    ('luci.swarming.bot.BotFileService', 'PutBlobs'): PutBlobsRequest.SerializeToString,
  }
  response_deserializers = {
    ('luci.swarming.bot.BotFileService', 'Contains'): ContainsReply.FromString,
    ('luci.swarming.bot.BotFileService', 'GetBlobs'): GetBlobsReply.FromString,
    ('luci.swarming.bot.BotFileService', 'PutBlobs'): PutBlobsReply.FromString,
  }
  cardinalities = {
    'Contains': cardinality.Cardinality.UNARY_UNARY,
    'GetBlobs': cardinality.Cardinality.UNARY_STREAM,
    'PutBlobs': cardinality.Cardinality.STREAM_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'luci.swarming.bot.BotFileService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
