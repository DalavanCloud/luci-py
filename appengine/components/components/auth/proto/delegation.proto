// Copyright 2015 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

package components.auth.proto.delegation;


// Signed serialized Subtoken.
//
// This message is just an envelope that carries the serialized Subtoken message
// and its signature.
//
// Reserved IDs: 1.
message DelegationToken {
  // Identity of a service that signed this token (e.g. 'service:app-id').
  //
  // Will be queries (via SSL) for the public key to use for signature
  // verification.
  //
  // Required.
  optional string signer_id = 2;

  // ID of a key used for making the signature.
  //
  // There can be multiple active keys at any moment in time: one used for new
  // signatures, and one being rotated out (but still valid for verification).
  //
  // The lifetime of the token indirectly depends on the lifetime of the signing
  // key, which is 24h. So delegation tokens can't live longer than 24h.
  //
  // Required.
  optional string signing_key_id = 3;

  // The signature: PKCS1_v1_5+SHA256(serialized_subtoken, signing_key_id).
  //
  // Required.
  optional bytes pkcs1_sha256_sig = 4;

  // Serialized Subtoken message. It's signature is stored in pkcs1_sha256_sig.
  //
  // Required.
  optional bytes serialized_subtoken = 5;
}


// Identifies who delegates what authority to whom where.
message Subtoken {
  // WHO. Identity whose authority is delegated. Usually it's the identity that
  // generates the delegation token.
  //
  // Required.
  optional string issuer_id = 1;

  // When the subtoken was generated (and when it becomes valid).
  //
  // Number of seconds since epoch (Unix timestamp).
  //
  // Required.
  optional int64 creation_time = 2;

  // How long the token is considered valid (in seconds).
  //
  // Required.
  optional int32 validity_duration = 3;

  // Identifier of this subtoken.
  //
  // Used for logging and tracking purposes.
  //
  // Required.
  optional int64 subtoken_id = 4;

  // To WHOM the authority is delegated.
  //
  // Each item can be an identity string (e.g. "user:<email>"), a "group:<name>"
  // string, or special '*' string which means "Any bearer can use the token".
  //
  // Required.
  repeated string audience = 5;

  // WHERE the token is valid.
  //
  // List of services (specified as service identities, e.g. "service:app-id")
  // that should accept this token. May also contain special '*' string, which
  // means "All services".
  //
  // Required.
  repeated string services = 6;

  // If this token was minted on some else's behalf (i.e. issuer_id field was
  // provided externally) stores an identify of whoever initiated the minting
  // request.
  //
  // Optional field.
  optional string impersonator_id = 7;
}
