// Copyright 2015 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Configuration schema for configs fetched via a config service.

package auth_service;


// Configuration of cron job that imports groups from external sources.
message GroupImporterConfig {
  // Import groups stored as files in a tarball.
  message TarballEntry {
    // Where to import data from.
    optional string url = 1;
    // List of OAuth scopes to use for authentication (or empty to skip auth).
    repeated string oauth_scopes = 2;
    // Email domain to append to imported identities.
    optional string domain = 3;
    // List of group systems expected to be found in the archive. They act as
    // prefixes to group names, e.g 'ldap'. Each system corresponds to
    // a subdirectory in the tarball. Each tarball may have groups from multiple
    // external systems, but groups from some external system must not be split
    // between multiple tarballs. When importer sees <group system name>/* in
    // a tarball, it modifies group list from that system on the auth_service to
    // match group list in the tarball _exactly_. For example it removes groups
    // that are on the server, but no longer present in the tarball.
    repeated string systems = 4;
    // List of groups to import from the tarball (as filenames relative to
    // tarball root, e.g. 'ldap/some-group'). If empty, imports all groups in
    // the tarball.
    repeated string groups = 5;
  }

  // Import a single group stored as a plain list of identities.
  message PlainlistEntry {
    // Where to import data from.
    optional string url = 1;
    // List of OAuth scopes to use for authentication (or empty to skip auth).
    repeated string oauth_scopes = 2;
    // Email domain to append to imported identities.
    optional string domain = 3;
    // For PLAINLIST imports, a name of imported group. The full group name will
    // be 'external/<group>'.
    optional string group = 4;
  }

  repeated TarballEntry tarball = 1;
  repeated PlainlistEntry plainlist = 2;
}


// OAuth client_id whitelist config.
message OAuthConfig {
  // ClientID returned by /auth/api/v1/server/oauth_config endpoint to clients.
  optional string primary_client_id = 1;
  // Client secret (that's not really a secret, since it is visible) returned
  // by /auth/api/v1/server/oauth_config endpoint to clients. Corresponding
  // callback URL must be localhost or urn:ietf:wg:oauth:2.0:oob.
  optional string primary_client_secret = 2;
  // Whitelist of all accepted client_ids (in addition to the primary one).
  repeated string client_ids = 3;
}


// IP whitelists config: a set of named IP whitelists and a mapping between
// identity name -> IP whitelist to restrict it to.
message IPWhitelistConfig {
  message IPWhitelist {
    // Name of the IP whitelist.
    optional string name = 1;
    // List of subnets.
    repeated string subnets = 2;
  }

  message Assignment {
    // Identity to restrict IPs to.
    optional string identity = 1;
    // Name of the corresponding IPWhitelist with a set of subnets.
    optional string ip_whitelist_name = 2;
  }

  // A set of named subnets.
  repeated IPWhitelist ip_whitelists = 1;
  // A mapping "identity name -> IP whitelist name".
  repeated Assignment assignments = 2;
}


// Configuration for delegation token minter.
message DelegationConfig {
  // Rules restrict what kind of delegation token can be minted by a particular
  // user targeting particular services. Given an incoming token request from
  // user A for token with services=[S1, S2, S3], the list of rules evaluated
  // sequentially until rule R is found such as:
  //    (A in R.user_id) and ([S1, S2, S3] is subset of R.target_service).
  // Matching rule can specify what users can be impersonated by the caller.
  // If no rules match a request, default is "no impersonation allowed".
  // See also components/auth/proto/delegation.proto.
  message Rule {
    // Rule inputs (used to match a minting request to a rule).

    // List of identity strings (users of the token minter API) that match this
    // rule (e.g. 'service:app-id'). '*' denote "anyone" (useful in a fallback
    // rule). Required.
    repeated string user_id = 1;

    // A token request matches this rule if its 'services' field contains '*'
    // or is subset of 'target_service' list.
    // '*' denotes "any service". Required.
    repeated string target_service = 2;

    // Rule outputs.

    // Maximum allowed validity duration (sec) of minted delegation tokens.
    // Required.
    optional int32 max_validity_duration = 3;

    // List of groups\globs\identities that define set of users that are allowed
    // to be impersonated by the caller. Empty list if impersonation is not
    // allowed (default). Format of the entries:
    //     user:abc@example.com - identity
    //     user:*@example.com - identity glob
    //     group:group-name - group
    repeated string allowed_to_impersonate = 4;
  }

  // Rules are evaluated sequentially until the first hit.
  repeated Rule rules = 1;
}
