// Copyright 2015 The Swarming Authors. All rights reserved.
// Use of this source code is governed by the Apache v2.0 license that can be
// found in the LICENSE file.

// Schemas for config files in services/luci-config config set.
//
// In this file, "string pattern" is an exact string (can't have a colon) or a
// string that starts with "regex:", followed by a regular expression. In case
// of regex, the pattern must match an entire string, as if it was sorrounded by
// ^ and $.

syntax = "proto2";

package luci.config;

// A tenant of a service. Defined in projects.cfg.
message Project {
  // Depending on repository type, luci-config imports configuration files
  // differently.
  enum ConfigStorageType {
    // Will be used if config_storage_type is not set.
    UNSET = 0;
    // Gitiles REST API is used to fetch config files.
    GITILES = 1;
  }
  // Globally unique id of the project.
  optional string id = 1;
  // URL of the repository where project-wide configurations are stored.
  optional string config_location = 2;
  // Type of the configuration repository, see ConfigStorageType.
  optional ConfigStorageType config_storage_type = 3;
}

// Schema of projects.cfg file. Represents luci tenants registry.
message ProjectsCfg {
  // All projects served by this instance of Luci.
  repeated Project projects = 1;
}

// Schema of acl.cfg file.
message AclCfg {
  // Name of the group that has access to all services/* config sets.
  optional string service_access_group = 1;
  // Name of the group that has access to all projects/* config sets.
  optional string project_access_group = 2;
}

// Schema for import.cfg. It specified how to import configuration files from
// external sources.
message ImportCfg {

  message Gitiles {
    // Request timeout in seconds when requesting commit log.
    optional int32 fetch_log_deadline = 1;
    // Request timeout in seconds when requesting directory archive.
    optional int32 fetch_archive_deadline = 2;
    // Default ref for project configs.
    optional string project_config_default_ref = 3;
    // Default directory for project configs.
    optional string project_config_default_path = 4;
    // Default directory for ref configs.
    optional string ref_config_default_path = 5;
  }

  // Configuration of import from Gitiles repositories.
  optional Gitiles gitiles = 1;
}

// Schema of schemas.cfg
message SchemasCfg {
  message Schema {
    // Name of schema.
    // For service configs, "<config_set>:<path>"
    // For project configs, "projects:<path>"
    // For ref configs, "projects/refs:<path>"
    optional string name = 1;
    // URL to the schema definition, e.g. to a .proto file in a repository.
    optional string url = 2;
  }
  // List of known schemas. They are available at /schemas/<name> as a short
  // mutable link.
  repeated Schema schemas = 1;
}

/******************************************************************************/
/* Validation                                                                 */
/******************************************************************************/

// Schema of validation.cfg
message ValidationCfg {
  // Defines one validation rule. It can match configs in different config-sets
  // and paths.
  message Rule {
    // A string pattern (see above) for config_set.
    optional string config_set = 1;
    // A string pattern (see above) for config file path.
    optional string path = 2;
    // URL of a validation endpoint. The config service will send an HTTP POST
    // request to the endpoint, where body is JSON-encoded
    // ValidationRequestMessage. The endpoint is expected to respond with
    // HTTP status 200 and JSON-encoded ValidationResponseMessage.
    optional string url = 3;
  }

  // Defines validation rules for externally-validated configs.
  // All rules that match a config by config_set and path must pass in order
  // for a config to be considered valid.
  repeated Rule rules = 1;
}


// This message is used only in JSON form. It is sent as request body to an
// external validation endpoint in order to validate a config.
message ValidationRequestMessage {
  // Config set of the config file to validate.
  optional string config_set = 1;
  // Path of the config file to validate.
  optional string path = 2;
  // Base64-encoded contents of the file.
  optional string content = 3;
}

// This message is used only in JSON form. It is expected from an external
// validation endpoint that validates a config.
message ValidationResponseMessage {
  // Severity of a validation response message. In JSON encoded as a string.
  enum Severity {
    DEBUG = 10;
    INFO = 20;
    WARNING = 30;
    ERROR = 40;
    CRITICAL = 50;
  }
  // A message that explains why a config is valid or not.
  message Message {
    // Textual representation of the message.
    optional string text = 1;
    // If an error, a config is considered invalid. Defaults to INFO.
    optional Severity severity = 2;
  }
  // Errors, warnings and other information found during validation.
  // If at least one error is found, the config is considered invalid.
  repeated Message messages = 1;
}
