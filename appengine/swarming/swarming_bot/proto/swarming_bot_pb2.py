# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: swarming_bot.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='swarming_bot.proto',
  package='luci.swarming',
  syntax='proto3',
  serialized_pb=_b('\n\x12swarming_bot.proto\x12\rluci.swarming\"\x1b\n\x0bPollRequest\x12\x0c\n\x04test\x18\x01 \x01(\x08\"\x8c\x01\n\x0cPollResponse\x12\x14\n\nsleep_time\x18\x01 \x01(\x01H\x00\x12\x11\n\x07new_bot\x18\x02 \x01(\x0cH\x00\x12\x12\n\x08manifest\x18\x03 \x01(\tH\x00\x12\x1a\n\x10terminate_taskid\x18\x04 \x01(\x05H\x00\x12\x19\n\x0frestart_message\x18\x05 \x01(\tH\x00\x42\x08\n\x06\x61\x63tion2M\n\nBotService\x12?\n\x04Poll\x12\x1a.luci.swarming.PollRequest\x1a\x1b.luci.swarming.PollResponseb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_POLLREQUEST = _descriptor.Descriptor(
  name='PollRequest',
  full_name='luci.swarming.PollRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='test', full_name='luci.swarming.PollRequest.test', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=37,
  serialized_end=64,
)


_POLLRESPONSE = _descriptor.Descriptor(
  name='PollResponse',
  full_name='luci.swarming.PollResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sleep_time', full_name='luci.swarming.PollResponse.sleep_time', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='new_bot', full_name='luci.swarming.PollResponse.new_bot', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='manifest', full_name='luci.swarming.PollResponse.manifest', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='terminate_taskid', full_name='luci.swarming.PollResponse.terminate_taskid', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='restart_message', full_name='luci.swarming.PollResponse.restart_message', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='action', full_name='luci.swarming.PollResponse.action',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=67,
  serialized_end=207,
)

_POLLRESPONSE.oneofs_by_name['action'].fields.append(
  _POLLRESPONSE.fields_by_name['sleep_time'])
_POLLRESPONSE.fields_by_name['sleep_time'].containing_oneof = _POLLRESPONSE.oneofs_by_name['action']
_POLLRESPONSE.oneofs_by_name['action'].fields.append(
  _POLLRESPONSE.fields_by_name['new_bot'])
_POLLRESPONSE.fields_by_name['new_bot'].containing_oneof = _POLLRESPONSE.oneofs_by_name['action']
_POLLRESPONSE.oneofs_by_name['action'].fields.append(
  _POLLRESPONSE.fields_by_name['manifest'])
_POLLRESPONSE.fields_by_name['manifest'].containing_oneof = _POLLRESPONSE.oneofs_by_name['action']
_POLLRESPONSE.oneofs_by_name['action'].fields.append(
  _POLLRESPONSE.fields_by_name['terminate_taskid'])
_POLLRESPONSE.fields_by_name['terminate_taskid'].containing_oneof = _POLLRESPONSE.oneofs_by_name['action']
_POLLRESPONSE.oneofs_by_name['action'].fields.append(
  _POLLRESPONSE.fields_by_name['restart_message'])
_POLLRESPONSE.fields_by_name['restart_message'].containing_oneof = _POLLRESPONSE.oneofs_by_name['action']
DESCRIPTOR.message_types_by_name['PollRequest'] = _POLLREQUEST
DESCRIPTOR.message_types_by_name['PollResponse'] = _POLLRESPONSE

PollRequest = _reflection.GeneratedProtocolMessageType('PollRequest', (_message.Message,), dict(
  DESCRIPTOR = _POLLREQUEST,
  __module__ = 'swarming_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.PollRequest)
  ))
_sym_db.RegisterMessage(PollRequest)

PollResponse = _reflection.GeneratedProtocolMessageType('PollResponse', (_message.Message,), dict(
  DESCRIPTOR = _POLLRESPONSE,
  __module__ = 'swarming_bot_pb2'
  # @@protoc_insertion_point(class_scope:luci.swarming.PollResponse)
  ))
_sym_db.RegisterMessage(PollResponse)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class BotServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Poll = channel.unary_unary(
        '/luci.swarming.BotService/Poll',
        request_serializer=PollRequest.SerializeToString,
        response_deserializer=PollResponse.FromString,
        )


class BotServiceServicer(object):

  def Poll(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BotServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Poll': grpc.unary_unary_rpc_method_handler(
          servicer.Poll,
          request_deserializer=PollRequest.FromString,
          response_serializer=PollResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'luci.swarming.BotService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaBotServiceServicer(object):
  def Poll(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaBotServiceStub(object):
  def Poll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Poll.future = None


def beta_create_BotService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('luci.swarming.BotService', 'Poll'): PollRequest.FromString,
  }
  response_serializers = {
    ('luci.swarming.BotService', 'Poll'): PollResponse.SerializeToString,
  }
  method_implementations = {
    ('luci.swarming.BotService', 'Poll'): face_utilities.unary_unary_inline(servicer.Poll),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_BotService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('luci.swarming.BotService', 'Poll'): PollRequest.SerializeToString,
  }
  response_deserializers = {
    ('luci.swarming.BotService', 'Poll'): PollResponse.FromString,
  }
  cardinalities = {
    'Poll': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'luci.swarming.BotService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
