// Copyright 2016 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// This describes the interface a Swarming bot can use to contact a Swarming
// server over a gRPC proxy. It essentially duplicates the "native" Swarming
// REST API (or, at least, it will in the near future).
//
// This proto is *not yet stable* and *will* change over time in non-backward-
// compatible ways.

syntax = "proto3";

package luci.swarming.bot;
import "google/protobuf/struct.proto";

service BotService {
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse);
  rpc BotUpdate(BotUpdateRequest) returns (BotUpdateResponse);
  rpc Poll(PollRequest) returns (PollResponse);
  rpc TaskUpdate(TaskUpdateRequest) returns (TaskUpdateResponse);
  rpc TaskError(TaskErrorRequest) returns (TaskErrorResponse);
}

message Dimension {
  string name = 1;
  repeated string values = 2;
}

message State {
  repeated string audio = 1;
  string bot_group_cfg_version = 2;
  double cost_usd_hour = 3;
  string cpu = 4;
  string cwd = 5;
  google.protobuf.Struct disks = 6;
  repeated string gpu = 7;
  string hostname = 8;
  string ip = 9;
  string locale = 10;
  int32 nb_files_in_temp = 11;
  int32 pid = 12;
  int32 ram = 13;
  int32 running_time = 14;
  int32 sleep_streak = 15;
  int32 started_ts = 16;
  google.protobuf.Struct temp = 17;
  int32 uptime = 18;
  string user = 19;
}

message Attributes {
  repeated Dimension dimensions = 1;
  State state = 2;
  string version = 3;
}

message HandshakeRequest {
  Attributes attributes = 1;
}

message HandshakeResponse {
  string server_version = 1;
  string bot_version = 2;
  string bot_group_cfg_version = 3;
  message BotGroupCfg {
    repeated Dimension dimensions = 1;
  }
  BotGroupCfg bot_group_cfg = 4;
}

message BotUpdateRequest {
  string bot_version = 1;
}

message BotUpdateResponse {
  bytes bot_code = 1;
}

message PollRequest {
  Attributes attributes = 1;
}

message Manifest {
  string task_id = 1;

  // Not the "Dimensions" message - these are the *actual*
  // dimensions, not the *allowed* dimensions, so the values
  // are scalars, not lists
  map<string,string> dimensions = 2;

  message Isolated {
    string input = 1; // sha1 digest
    string namespace = 2;
  }
  Isolated isolated = 3;
  map<string, string> env = 4;
  int32 grace_period = 5;
  int32 hard_timeout = 6;
  int32 io_timeout = 7;
  string bot_id = 8;
  repeated string outputs = 9;
}

message PollResponse {
  enum ResponseType {
    UPDATE = 0;
    SLEEP = 1;
    TERMINATE = 2;
    RUN = 3;
    RESTART = 4;
  }

  ResponseType cmd = 1;
  oneof action {
    double sleep_time = 2;
    Manifest manifest = 3;
    string terminate_taskid = 4;
    string restart_message = 5;
    string version = 6;
  }
}

message TaskUpdateRequest {
  // Basic IDs
  string id = 1; // Bot ID
  string task_id = 2;

  // Missing if the task isn't finished yet
  message ExitStatus {
    int32 code = 1;
  }
  ExitStatus exit_status = 3;

  // Some standard output. Can be missing.
  message OutputChunk {
    bytes data = 1;
    int64 offset = 2;
  }
  OutputChunk output_chunk = 4;

  // All remaining parameters must match the Python dict exactly, as they are
  // automatically converted using protobuf.json_format.ParseDict (which,
  // despite the name, doesn't actually use json). The types must be exactly
  // what are expected by the Swarming server otherwise exceptions will be
  // thrown (see
  // https://developers.google.com/protocol-buffers/docs/proto#scalar for proto
  // vs Python scalar types).
  //
  // All params used to be represented by google.protobuf.Struct, but
  // unfortunately that data type doesn't distinguish between integer and
  // floating point numbers, so it didn't sufficiently preserve types.

  // Flags and IDs (first id = 100)
  bool hard_timeout = 100;
  bool io_timeout = 101;

  // Other scalars (first id = 200)
  float bot_overhead = 200;
  float cost_usd = 201;
  float duration = 202;

  // Structured data (first id = 300)
  message OutputsRef {
    string isolated = 1;
    string isolatedserver = 2;
    string namespace = 3;
  }
  OutputsRef outputs_ref = 300;
  message IsolatedStats {
    message TransferStats {
      float duration = 1;
      int32 initial_number_items = 2;
      int32 initial_size = 3;
      bytes items_cold = 4; // Python packed
      bytes items_hot = 5; // Python packed
    }
    TransferStats download = 1;
    TransferStats upload = 2;
  }
  IsolatedStats isolated_stats = 301;

  // Unknown types: represent as structs for now (first id = 400)
  google.protobuf.Struct cipd_pins = 400;
  google.protobuf.Struct cipd_stats = 401;
}

message TaskUpdateResponse {
  // If the TaskUpdateRequest was not accepted, this string will be populated
  // with the reason why. Otherwise, it will be empty.
  string error = 1;

  // True if the bot is still working but Swarming has determined that the task
  // should be cancelled.
  bool must_stop = 2;
}

message TaskErrorRequest {
  string bot_id = 1;
  string task_id = 2;

  // A human-readable message that states why the task could not be completed.
  string msg = 3;
}

message TaskErrorResponse {
  // I'm not sure what this is for - duplicating the native API.
  bool ok = 1;
}
