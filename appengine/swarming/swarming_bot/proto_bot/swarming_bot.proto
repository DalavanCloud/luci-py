// Copyright 2016 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// This describes the interface a Swarming bot can use to contact a Swarming
// server over a gRPC proxy. It essentially duplicates the "native" Swarming
// REST API (or, at least, it will in the near future).
//
// This proto is *not yet stable* and *will* change over time in non-backward-
// compatible ways.

syntax = "proto3";

package luci.swarming.bot;
import "google/protobuf/struct.proto";

service BotService {
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse);
  rpc BotUpdate(BotUpdateRequest) returns (BotUpdateResponse);
  rpc Poll(PollRequest) returns (PollResponse);
  rpc TaskUpdate(TaskUpdateRequest) returns (TaskUpdateResponse);
  rpc TaskError(TaskErrorRequest) returns (TaskErrorResponse);
}

message Dimension {
  string name = 1;
  repeated string values = 2;
}

message State {
  repeated string audio = 1;
  string bot_group_cfg_version = 2;
  double cost_usd_hour = 3;
  string cpu = 4;
  string cwd = 5;
  google.protobuf.Struct disks = 6;
  repeated string gpu = 7;
  string hostname = 8;
  string ip = 9;
  string locale = 10;
  int32 nb_files_in_temp = 11;
  int32 pid = 12;
  int32 ram = 13;
  int32 running_time = 14;
  int32 sleep_streak = 15;
  int32 started_ts = 16;
  google.protobuf.Struct temp = 17;
  int32 uptime = 18;
  string user = 19;
}

message Attributes {
  repeated Dimension dimensions = 1;
  State state = 2;
  string version = 3;
}

message HandshakeRequest {
  Attributes attributes = 1;
}

message HandshakeResponse {
  string server_version = 1;
  string bot_version = 2;
  string bot_group_cfg_version = 3;
  message BotGroupCfg {
    repeated Dimension dimensions = 1;
  }
  BotGroupCfg bot_group_cfg = 4;
}

message BotUpdateRequest {
  string bot_version = 1;
}

message BotUpdateResponse {
  bytes bot_code = 1;
}

message PollRequest {
  Attributes attributes = 1;
}

message Manifest {
  string task_id = 1;

  // Not the "Dimensions" message - these are the *actual*
  // dimensions, not the *allowed* dimensions, so the values
  // are scalars, not lists
  map<string,string> dimensions = 2;

  message Isolated {
    string input = 1; // sha1 digest
    string namespace = 2;
  }
  Isolated isolated = 3;
  map<string, string> env = 4;
  int32 grace_period = 5;
  int32 hard_timeout = 6;
  int32 io_timeout = 7;
  string bot_id = 8;
  repeated string outputs = 9;
}

message PollResponse {
  enum ResponseType {
    UPDATE = 0;
    SLEEP = 1;
    TERMINATE = 2;
    RUN = 3;
    RESTART = 4;
  }

  ResponseType cmd = 1;
  oneof action {
    double sleep_time = 2;
    Manifest manifest = 3;
    string terminate_taskid = 4;
    string restart_message = 5;
    string version = 6;
  }
}

message TaskUpdateRequest {
  // A set of opaque (to the proxy) parameters that should simply be passed
  // directly to the Swarming server.
  google.protobuf.Struct params = 1;

  string bot_id = 2;
  string task_id = 3;

  // A chunk of stdout contents of unknown encoding.
  bytes output_chunk = 4;

  // The offset of the current chunk of stdout - used by Swarming to ensure
  // there's nothing missing.
  int64 output_chunk_offset = 5;

  // True if this is the final update for this task.
  bool finished = 6;

  // The exit code of the process; only meaningful if finished is true.
  int32 exit_code = 7;
}

message TaskUpdateResponse {
  // If the TaskUpdateRequest was not accepted, this string will be populated
  // with the reason why. Otherwise, it will be empty.
  string error = 1;

  // True if the bot is still working but Swarming has determined that the task
  // should be cancelled.
  bool must_stop = 2;
}

message TaskErrorRequest {
  string bot_id = 1;
  string task_id = 2;

  // A human-readable message that states why the task could not be completed.
  string msg = 3;
}

message TaskErrorResponse {
  // I'm not sure what this is for - duplicating the native API.
  bool ok = 1;
}
